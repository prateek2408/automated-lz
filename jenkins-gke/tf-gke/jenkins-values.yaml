# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

controller:
  tag: "2.300"
  containerEnv:
    - name: PROJECT_ID
      valueFrom:
        secretKeyRef:
            name: jenkins-k8s-config
            key: project_id
    - name: GITHUB_REPO
      valueFrom:
        secretKeyRef:
            name: github-secrets
            key: github_repo
    - name: GITHUB_USERNAME
      valueFrom:
        secretKeyRef:
            name: github-secrets
            key: github_username
    - name: GITHUB_TOKEN
      valueFrom:
        secretKeyRef:
            name: github-secrets
            key: github_token
    - name: jenkins_tf_ksa
      valueFrom:
        secretKeyRef:
            name: jenkins-k8s-config
            key: jenkins_tf_ksa
  servicePort: 80
  serviceType: LoadBalancer
  installPlugins:
      - blueocean-dashboard
      - checks-api
      - pipeline-stage-view
      - ssh-credentials
      - popper2-api
      - structs
      - blueocean-core-js
      - momentjs
      - blueocean-personalization
      - sshd
      - git-client
      - workflow-durable-task-step
      - workflow-cps-global-lib
      - popper-api
      - workflow-basic-steps
      - pipeline-graph-analysis
      - blueocean-pipeline-editor
      - workflow-aggregator
      - plain-credentials
      - kubernetes-credentials
      - favorite
      - blueocean-i18n
      - workflow-support
      - github
      - configuration-as-code
      - display-url-api
      - blueocean-config
      - jenkins-design-language
      - bootstrap4-api
      - bouncycastle-api
      - durable-task
      - blueocean-git-pipeline
      - font-awesome-api
      - caffeine-api
      - jackson2-api
      - htmlpublisher
      - workflow-api
      - pipeline-stage-step
      - git
      - workflow-job
      - blueocean-pipeline-scm-api
      - pipeline-stage-tags-metadata
      - jira
      - matrix-project
      - jsch
      - lockable-resources
      - variant
      - git-server
      - cloudbees-bitbucket-branch-source
      - trilead-api
      - scm-api
      - docker-workflow
      - pubsub-light
      - jdk-tool
      - branch-api
      - plugin-util-api
      - authentication-tokens
      - handlebars
      - pipeline-model-extensions
      - token-macro
      - pipeline-rest-api
      - blueocean-display-url
      - jjwt-api
      - mailer
      - blueocean-autofavorite
      - blueocean-commons
      - blueocean
      - command-launcher
      - blueocean-rest
      - kubernetes
      - apache-httpcomponents-client-4-api
      - cloudbees-folder
      - job-dsl
      - blueocean-bitbucket-pipeline
      - docker-commons
      - bootstrap5-api
      - blueocean-jira
      - pipeline-milestone-step
      - blueocean-pipeline-api-impl
      - blueocean-github-pipeline
      - pipeline-model-api
      - pipeline-model-definition
      - echarts-api
      - docker-custom-build-environment
      - handy-uri-templates-2-api
      - kubernetes-client-api
      - github-branch-source
      - blueocean-jwt
      - pipeline-input-step
      - github-api
      - junit
      - credentials-binding
      - workflow-scm-step
      - pipeline-build-step
      - ace-editor
      - blueocean-web
      - workflow-step-api
      - sse-gateway
      - credentials
      - okhttp-api
      - snakeyaml-api
      - blueocean-rest-impl
      - metrics
      - blueocean-events
      - workflow-cps
      - jquery3-api
      - script-security
      - workflow-multibranch
  JCasC:
    enabled: true
    configScripts:
        cloud: |
            jenkins:
                clouds:
                    - kubernetes:
                        name: "gke-executors"
                        serverUrl: "https://kubernetes.default"
                        jenkinsTunnel: "jenkins-agent:50000"
                        jenkinsUrl: "http://jenkins:80"
                        skipTlsVerify: true
                        namespace: "default"
                        templates:
                            - name: "jenkins-jnlp"
                              namespace: "default"
                              nodeUsageMode: NORMAL
                              label: "jnlp-exec"
                              containers:
                                - name: "jnlp"
                                  image: "jenkins/jnlp-slave"
                                  alwaysPullImage: false
                                  workingDir: "/home/jenkins/agent"
                                  ttyEnabled: true
                                  command: ""
                                  args: ""
                                  resourceRequestCpu: "500m"
                                  resourceLimitCpu: "1000m"
                                  resourceRequestMemory: "1Gi"
                                  resourceLimitMemory: "2Gi"
                              volumes:
                                - emptyDirVolume:
                                    memory: false
                                    mountPath: "/tmp"
                              idleMinutes: "1"
                              activeDeadlineSeconds: "120"
                              slaveConnectTimeout: "1000"
                            - name: "terraform"
                              namespace: "default"
                              nodeUsageMode: NORMAL
                              serviceAccount: ${jenkins_tf_ksa}
                              label: "terraform-exec"
                              containers:
                                - name: "terraform"
                                  image: "hashicorp/terraform:0.12.29"
                                  alwaysPullImage: false
                                  workingDir: "/home/jenkins/agent"
                                  ttyEnabled: true
                                  command: "/bin/sh -c"
                                  args: "cat"
                                  resourceRequestCpu: "100m"
                                  resourceLimitCpu: "500m"
                                  resourceRequestMemory: "500Mi"
                                  resourceLimitMemory: "1Gi"
                              volumes:
                                - emptyDirVolume:
                                    memory: false
                                    mountPath: "/tmp"
                              podRetention: "never"
                              activeDeadlineSeconds: "300"
                              slaveConnectTimeout: "1000"
        credentials: |
            credentials:
                system:
                    domainCredentials:
                    - credentials:
                        - usernamePassword:
                            scope: GLOBAL
                            id: "github-token"
                            username: ${GITHUB_USERNAME}
                            password: ${GITHUB_TOKEN}
                            description: "Github personal token"
        init-jobs: |
            jobs:
              - script: >
                    multibranchPipelineJob('terraform-jenkins-create-demo') {
                        factory {
                        workflowBranchProjectFactory {
                            scriptPath('example-pipelines/environments/Jenkinsfile')
                        }
                        }
                        branchSources {
                        github {
                            id('12312313')
                            scanCredentialsId('github-token')
                            repoOwner("${GITHUB_USERNAME}")
                            repository("${GITHUB_REPO}")
                            buildOriginBranch(true)
                            buildOriginPRMerge(true)
                            includes("dev prod PR*")
                        }
                        }
                        orphanedItemStrategy {
                        discardOldItems {
                            numToKeep(10)
                        }
                        }
                        triggers {
                        periodic(1)
                        }
                    }
